#!@ENV@ bash

# @PACKAGE@-@VERSION@ (libxenesis.so) #

# Copyright (c) 2014 Antonio Cao (@burzumishi) #

# This is free software;
# You have unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.

# Xenesis Core Library #

# libxenesis.so: Core functions and definitions #

# Force POSIX "C" (Does not work on CYGWIN_NT)
export $LANG $LC_ALL


# Command Definitions #

ECHO=$(which echo);
GREP=$(which grep);
PING=$(which ping);
NSLOOKUP=$(which nslookup);
HOSTCMD=$(which host);
AWK=$(which awk);
SORT=$(which sort);
CAT=$(which cat);
MV=$(which mv);
CP=$(which cp);
LN=$(which ln);
LS=$(which ls);
RM=$(which rm);
CHMOD=$(which chmod);
TOUCH=$(which touch);
TAIL=$(which tail);
HEAD=$(which head);
LESS=$(which less);
MORE=$(which more);
FIND=$(which find);
MKDIR=$(which mkdir);
DATE=$(which date);
TEE=$(which tee);
SED=$(which sed)

SSH=$(which $SSHCMD);
SCP=$(which $SCPCMD);

# Define (true || false)

true=0;
false=1;

# Define Shell Colors #
color_blk="\e[0;30m";  # Black - Regular #
color_red="\e[0;31m";  # Red #
color_grn="\e[0;32m";  # Green #
color_ylw="\e[0;33m";  # Yellow #
color_blu="\e[0;34m";  # Blue #
color_pur="\e[0;35m";  # Purple #
color_cyn="\e[0;36m";  # Cyan #
color_wht="\e[0;37m";  # White #

color_bblk="\e[1;30m"; # Black - Bold #
color_bred="\e[1;31m"; # Red #
color_bgrn="\e[1;32m"; # Green #
color_bylw="\e[1;33m"; # Yellow #
color_bblu="\e[1;34m"; # Blue #
color_bpur="\e[1;35m"; # Purple #
color_bcyn="\e[1;36m"; # Cyan #
color_bwht="\e[1;37m"; # White #

color_ublk="\e[4;30m"; # Black - Underline #
color_ured="\e[4;31m"; # Red #
color_ugrn="\e[4;32m"; # Green #
color_uylw="\e[4;33m"; # Yellow #
color_ublu="\e[4;34m"; # Blue #
color_upur="\e[4;35m"; # Purple #
color_ucyn="\e[4;36m"; # Cyan #
color_uwht="\e[4;37m"; # White #

color_bkblk="\e[40m";  # Black - Background #
color_bkred="\e[41m";  # Red #
color_bdgrn="\e[42m";  # Green #
color_bkylw="\e[43m";  # Yellow #
color_bkblu="\e[44m";  # Blue #
color_bkpur="\e[45m";  # Purple #
color_bkcyn="\e[46m";  # Cyan #
color_bkwht="\e[47m";  # White #

color_reset="\e[0m";   # Text Reset #

# Define Color Messages #

if [ "$COLOR" == "yes" ]; then
	ECHO="$ECHO -e";
	OK="${color_bgrn}OK${color_reset}";
	ERROR="${color_bred}ERROR${color_reset}";
	WARNING="${color_bylw}WARNING${color_reset}";
	DEBUG="${color_bred}**DEBUG**${color_reset}";
	STARTMSG_PACK="${color_bred}<-${color_bylw}[${color_bwht} @PACKAGE@ @VERSION@ ${color_bblu}(${color_bcyn}(${color_bwht} @DESCRIPTION@ ${color_bcyn})${color_bblu}) ${color_bgrn}$OS ${color_bylw}]${color_bred}->${color_reset}";
	USAGE="${color_bgrn}Usage:${color_reset} ${color_bwht}@PACKAGE@ [load] \"[plugin{s}]\" \"[host{s}] || [host_list]\" \"[plugin{s} params (optional)]\"
               [test] \"[plugin{s}]\" \"[host{s}] || [host_list]\" \"[plugin{s} params (optional)]\"
               [exec] \"[cmd{s}]\" \"[host{s}] || [host_list]\"
               [sshconf] \"[host{s}] || [host_list]\"${color_reset}";
else # Define RAW Messages #
	OK="OK";
	ERROR="ERROR";
	WARNING="WARNING";
	DEBUG="**DEBUG**";
	STARTMSG_PACK="<-[ @PACKAGE@ @VERSION@ (( @DESCRIPTION@ )) $OS ]->";
	USAGE="Usage: @PACKAGE@ [load] \"[plugin{s}]\" \"[host{s}] || [host_list]\" \"[plugin{s} params (optional)]\"
               [test] \"[plugin{s}]\" \"[host{s}] || [host_list]\" \"[plugin{s} params (optional)]\"
               [exec] \"[cmd{s}]\" \"[host{s}] || [host_list]\"
               [sshconf] \"[host{s}] || [host_list]\"";
fi;

# Define LOG #

# Define Log Date Format #
LOGDATE=$($DATE $DATEFORMAT);

# Define Log Files #
LOG="$LOGDIR/$LOGFILE";
DEBUGLOG="$LOGDIR/debug-$LOGFILE";

# Define functions #

# check_user(): check superuser #
function check_user {
	WHOAMI=$(whoami);

	if [ "$WHOAMI" != "root" ]; then
		$ECHO;
		echolog "$WARNING! ($WHOAMI) you are not superuser!";
		$ECHO;
	fi;

	return $true;
}

# setup_os_commands(): Load Setup OS specific commands and variables. This commands and variables can be redefined in "etc/os/commands" config files. #
function setup_os_commands {
	case $OS in
		# Operating System # Linux, HP-UX, CYGWIN_NT, ... #
		*linux*|*Linux*|*LINUX*) . @sysconfdir@/@PACKAGE@/os/commands/linux.conf;
			;;
		*hp-ux*|*HP-UX*) . @sysconfdir@/@PACKAGE@/os/commands/hpux.conf; # TODO TODO TODO #
			;;
		*FreeBSD*|*freebsd*) . @sysconfdir@/@PACKAGE@/os/commands/freebsd.conf;
			;;
		*cygwin*|*CYGWIN*) . @sysconfdir@/@PACKAGE@/os/commands/cygwin.conf; # TODO TODO TODO #
			;;
		*) . @sysconfdir@/@PACKAGE@/os/commands/default.conf;
			;;
	esac
	return $true;
}

# echolog($string): log @PACKAGE@ activity #
function echolog {
	# Params: $string #
	string="$1";

	$ECHO "$string";
	$ECHO "[$LOGDATE] $string" >> $LOG;

	return $true;
}

# echolog_debug($string): debug log @PACKAGE@ activity #
function echolog_debug {
	# If ENABLEDEBUG is enabled, write log #
	if [ "$ENABLEDEBUG" == "yes" ]; then
		# Params: $string #
		string="$1";

		$ECHO "$string";
		$ECHO "[$LOGDATE] $string" >> $DEBUGLOG;

		return $true;
	fi;
}

# errorcheck($error): check for errors, if $false will exit (1) #
function errorcheck {
	# Params: $error #
        error=$1;

        if [[ $error -ne $true ]]; then
                echolog "$ERROR! An error was found. (Error Code: $error)";
                exit $false;
        else
                return $true;
        fi;
}

# check_directory_structure($directories): check and create directory #
function check_directory_structure {
	# Params $directories #
	directories="$*";

	for dir in $directories; do
		if [ -d "$dir" ]; then
			return $true;
		else
			$MKDIR -p $dir >/dev/null;
			errorcheck $?;
		fi;
	done
}

# continue_promt: Ask user to continue or not #
function continue_promt {
	$ECHO " Continue? (y/n): "
	read input
	case $input in
		     [Yy]*) ;;
		     [Nn]*) exit;;
		     *) $ECHO " Continue? (y/n): ";;
	esac
}

# startmsg(): command line help #
function startmsg {
	$ECHO 
	$ECHO "                         $STARTMSG_PACK";
	$ECHO
}

# usage(): command line help #
function usage {
	$ECHO "$USAGE";
	$ECHO 

	exit $true;
}
